# vim: ai et ts=2 st=2 sw=2 :
---
- name: Check if we are running supported OS
  assert:
    fail_msg: "{{ role_name }} does not support {{ ansible_distribution }} version {{ ansible_distribution_version }}"
    success_msg: "{{ role_name }} supports {{ ansible_distribution }} version {{ ansible_distribution_version }}"
    quiet: "{{ not ansible_check_mode }}"
    that:
      - >-
        ansible_distribution|lower in
          (__packages_supported_platforms |
            map(attribute='name') |
            map('lower'))
        and
        ("all" in (__packages_supported_platforms |
            json_query("[?name=='" + ansible_distribution + "'].versions[]"))
          or
          ansible_distribution_release|lower in
            (__packages_supported_platforms |
              json_query("[?name=='" + ansible_distribution + "'].versions[]"))
          or
          ansible_distribution_major_version|lower in
            (__packages_supported_platforms |
              json_query("[?name=='" + ansible_distribution + "'].versions[]"))
          or
          ansible_distribution_version|lower in
            (__packages_supported_platforms |
              json_query("[?name=='" + ansible_distribution + "'].versions[]"))
        )

# Configure repos before installing packages

- name: Include os specific config
  ansible.builtin.include_tasks: '{{ ansible_os_family | lower }}.yml'

- name: Install packages on both systems
  ansible.builtin.package:
    name: '{{ packages_install }}'
    state: present

- name: Services to start and enable on boot
  ansible.builtin.service:
    name: '{{ item }}'
    state: started
    enabled: true
  loop: '{{ packages_services_enabled }}'

- name: Services to stop and disable on boot
  ansible.builtin.service:
    name: '{{ item }}'
    state: stopped
    enabled: false
  loop: '{{ packages_services_disabled }}'
